#!/usr/bin/env perl6
# --------------------
#  This is Perl(6!)
# You have been warned
# --------------------

use v6.d;

# would be (maybe) better to use XML protocol, but I cannot be arsed.
constant $coqtop = 'coqtop';

# coqtop is awful.  We add «About $marker» to everything we say to Coq, then $prompt
# is our clue to stop waiting Coq.
constant $marker = "eeeeeee_{ ('aa'..'zz').pick }";
constant $prompt = "Expands to: Constant Top.$marker";

sub succ ($coq --> Str) {
  gather loop {
    with $coq.receive {
      next unless $_;
      next if / ^ $marker /;
      last if / $prompt /;
      .take;
    }
  } andthen .join("\n");
}

sub nb ($s) { say ($s ~ '.').fmt: '(* %-30s *)' }

sub MAIN (Str $query,
          Str :i(:$in),      #= modules to search
          Str :a(:$arity)    #= N or N-M
         )
{
  my $proc = Proc::Async.new: :w, $coqtop;
  my $chan = $proc.stdout.lines.Channel;
  $proc.stderr.tap: -> $ { };

  class coq {
    method say ($s) { $proc.say: "$s. About $marker." }
    method succ () { succ($chan) }
  }

  $proc.start;
  fail unless $chan.receive ~~ /^ "Welcome to Coq"/;

  nb 'HI';
  coq.say: "Definition $marker := tt";
  coq.succ;

  nb 'Loading';
  coq.say: "From mathcomp Require Import ssrnat ssrbool ssrfun div";
  coq.succ;

  nb "Searching ({ $in ?? $in !! 'everything' })";
  coq.say: "Search _ { $in ?? 'in ' ~ $in !! '' }";

  my $r = coq.succ;
  my @defs = $r.split(/<(\n)>\S/).map(* ~~ / <( <.ident>+ % '.' )> ':' /).grep(so*);

  my Int @fn = do with $arity.split('-') {
    when 2 { +.[0] .. +.[1] }
    when 1 { +$_ }
  }

  my @foralls = Nil;
  @foralls = gather { for ([\,] ('a'..*)).[@fn X- 1] { .take for .permutations } } if $arity;

  nb "{+@defs} entries. {@defs×@foralls} to search";
  print "\n";

  my Bool %found;
  KEEP { nb ("{+%found} found. " if %found) ~ <THXBYE> }

  for @foralls.sort X @defs -> ($args, $def) {
    next if %found{$def};

    my $type = qq｢{$args ?? "forall $args," !! ""} $query｣;
    coq.say: "Check $def : $type";

    if my $checked = coq.succ {
      %found{$def}++;

      coq.say: "Check $def";
      say coq.succ;

      my $threshold = 7;
      with $checked.lines {
        when * > $threshold { say .[0 ..^ $threshold] }
        when 2  { say .[1] }
        default { say $_ }
      }

      print "\n\n";
    }
  }

  True
}
