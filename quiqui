#!/usr/bin/env perl6

# would be (maybe) better to use XML protocol, but I cannot be arsed.
constant $coqtop = 'coqtop';

# coqtop is awful.  We add «About $marker» to everything we say to Coq, then $prompt
# is our clue to stop waiting Coq.
constant $marker = "eeeeeee_{ ('aa'..'zz').pick }";
constant $prompt = "Expands to: Constant Top.$marker";

sub succ ($coq --> Str) {
  gather loop {
    with $coq.receive {
      next unless $_;
      next if / ^ $marker /;
      last if / $prompt /;
      .take;
    }
  } andthen .join("\n");
}

sub nb ($s) { say ($s ~ '.').fmt: '(* %-30s *)' }

sub MAIN (Str $query) {
  my $proc = Proc::Async.new: :w, $coqtop;
  my $chan = $proc.stdout.lines.Channel;
  $proc.stderr.tap: -> $ { };

  class coq {
    method say ($s) { $proc.say: "$s. About $marker." }
    method succ () { succ($chan) }
  }

  $proc.start;
  $chan.receive;

  nb 'HI';
  coq.say: "Definition $marker := tt";
  coq.succ;

  nb 'Loading';
  coq.say: "From mathcomp Require Import ssrnat ssrbool ssrfun div";
  coq.succ;

  nb 'Searching';
  coq.say: "Search _ in ssrnat ssrbool div";

  my $xs = coq.succ;
  my @r = $xs.split(/<(\n)>\S/).map(* ~~ / <( <.ident>+ % '.' )> ':' / ).grep(so*);
  my @foralls = gather { for («a», «a b», «a b c») { .take for .permutations } }
  my $n_search = @r * @foralls;

  nb "{+@r} entries. {$n_search} to search";
  print "\n";

  my %found;

  for @foralls.sort -> $args {
    # print "\c[backspace]" x 30;
    # print $args;

    for @r -> $name {
      next if %found{$name};
      #say "----------- $name";

      my $type = "forall $args, $query";
      #nb $type;
      coq.say: "Check $name : $type";

      my $z = coq.succ;

      if $z && ! %found{$name}++ { #found

        coq.say: "Check $name";

        my $bout = coq.succ;
        say $bout;

        my $threshold = 7;

        with $z.lines {
          when * > $threshold { say .[0 ..^ $threshold] }
          when 2 { say .[1] }
          default { say $_ }
        }

        print "\n\n";
      }
    }
  }
  
  nb 'THXBYE';
}
