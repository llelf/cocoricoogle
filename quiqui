#!/usr/bin/env perl6

constant $marker = 'eeeeeee';
constant $prompt = "Expands to: Constant Top.eeeeeee";



sub succ ($coq --> Str) {
  gather loop {
    with $coq.receive {
      next unless $_;
      next if / ^ $marker /;
      last if / $prompt /;
      .take;
    }
  } andthen .join("\n");
}

sub nb ($s) { say ($s ~ '.').fmt: '(* %-15s *)' }

sub MAIN (Str $query) {

  my $proc = Proc::Async.new: :w, 'coqtop';
  my $chan = $proc.stdout.lines.Channel;
  $proc.stderr.tap: -> $ { };

  class coq {
    method say ($s) { $proc.say($s) }
    method succ () { succ($chan) }
  }

  $proc.start;
  $chan.receive;

  coq.say: "Definition $marker := tt. About eeeeeee.";
  nb 'HI';

  coq.succ;

  coq.say: "From mathcomp Require Import ssrnat ssrbool ssrfun div. About eeeeeee.";
  nb 'Loading';

  coq.succ;

  coq.say: "Search _ in ssrnat ssrbool div. About eeeeeee.";
  nb 'Searching';

  my $xs = coq.succ;

  my @r = $xs.split(/<(\n)>\S/).map(* ~~ / <( <.ident>+ % '.' )> ':' / ).grep(so*);

  my @foralls = gather { for («a», «a b», «a b c», «a b c d») { .take for .permutations } }

  my $n_search = @r * @foralls;

  nb "{+@r} entries. {$n_search} to search. ETA {($n_search/250/60).fmt('%.1fmin')}";
  print "\n";


  my %found;

  for @foralls.sort -> $args {
    # print "\c[backspace]" x 30;
    # print $args;

    for @r -> $name {
      next if %found{$name};
      #say "----------- $name";

      my $type = "forall $args, $query";
      #nb $type;
      coq.say: "Check $name : $type . About eeeeeee.";

      my $z = coq.succ;

      if $z && ! %found{$name}++ { #found

        coq.say: "Check $name. About eeeeeee.";

        my $bout = coq.succ;
        say $bout;

        my $threshold = 7;

        with $z.lines {
          when * > $threshold { say .[0 ..^ $threshold] }
          when 2 { say .[1] }
          default { say $_ }
        }

        print "\n\n";

      }
    }
  }
  

  nb 'THXBYE';

}
