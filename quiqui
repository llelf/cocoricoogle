#!/usr/bin/env perl6

constant $marker = 'eeeeeee';
constant $prompt = "Expands to: Constant Top.eeeeeee";



sub succ ($coq --> Str) {
  gather loop {
    with $coq.receive {
      next unless $_;
      next if / ^ $marker /;
      last if / $prompt /;
      .take;
    }
  } andthen .join("\n");
}

sub nb ($s) { say ($s ~ '.').fmt: '(* %-15s *)' }

sub MAIN (Str $query) {

  my \coq = Proc::Async.new: :w, 'coqtop';

  my $C = coq.stdout.lines.Channel;
  coq.stderr.tap: -> $ { };
  # my $err = coq.stderr.lines.Channel;

  # my $C1 = coq.stdout.lines.merge: coq.stderr.lines;
  # my $C = $C1.Channel;
  # my $C = coq.stdout.lines.Channel;

  coq.start;
  $C.receive;

  coq.say: "Definition eeeeeee := tt. About eeeeeee.";
  nb 'HI';

  succ $C;

  coq.say: "From mathcomp Require Import ssrnat ssrbool ssrfun div. About eeeeeee.";
  nb 'Loading';

  succ $C;

  coq.say: "Search _ in ssrnat ssrbool div. About eeeeeee.";
  nb 'Searching';

  my $xs = succ $C;

  my @r = $xs.split(/<(\n)>\S/).map(* ~~ / <( <.ident>+ % '.' )> ':' / ).grep(so*);

  nb "{+@r} entries";
  print "\n";

  for @r -> $name {
    # say "----------- $name";

    my @foralls = gather { for («a», «a b») { .take for .permutations } }

    for @foralls -> $args {

    coq.say: "Check $name : forall $args, $query. About eeeeeee.";

    my @z = gather loop {
      my $s = $C.receive; 
      next unless $s;
      next if $s ~~ / ^ eeeeeee /;
      last if $s ~~ / $prompt /;
      take $s;
    };

    if @z {

    coq.say: "Check $name. About eeeeeee.";

    my @bout = gather loop {
      my $s = $C.receive; 
      next unless $s;
      next if $s ~~ / ^ eeeeeee /;
      last if $s ~~ / $prompt /;
      take $s;
    }

    .say for @bout;
    print "\n";

    my $threshold = 7;
    .say for @z.head($threshold);
    say "   ‹…›" if @z > $threshold;
    print "\n\n";

    }
    }


  }
  

  nb 'THXBYE';

}
